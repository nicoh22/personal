\documentclass[a4paper,10pt]{article}
\usepackage[paper=a4paper, hmargin=1.5cm, bottom=1.5cm, top=3.5cm]{geometry}
\usepackage[latin1]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[spanish]{babel}
\usepackage{xspace}
\usepackage{xargs}
\usepackage{ifthen}
\usepackage{aed2-tad,aed2-symb,aed2-itef}


\newcommand{\moduloNombre}[1]{\textbf{#1}}

\let\NombreFuncion=\textsc
\let\TipoVariable=\texttt
\let\ModificadorArgumento=\textbf
\newcommand{\res}{$res$\xspace}
\newcommand{\tab}{\hspace*{7mm}}

\newcommandx{\TipoFuncion}[3]{%
  \NombreFuncion{#1}(#2) \ifx#3\empty\else $\to$ \res\,: \TipoVariable{#3}\fi%
}
\newcommand{\In}[2]{\ModificadorArgumento{in} \ensuremath{#1}\,: \TipoVariable{#2}\xspace}
\newcommand{\Out}[2]{\ModificadorArgumento{out} \ensuremath{#1}\,: \TipoVariable{#2}\xspace}
\newcommand{\Inout}[2]{\ModificadorArgumento{in/out} \ensuremath{#1}\,: \TipoVariable{#2}\xspace}
\newcommand{\Aplicar}[2]{\NombreFuncion{#1}(#2)}

\newlength{\IntFuncionLengthA}
\newlength{\IntFuncionLengthB}
\newlength{\IntFuncionLengthC}
%InterfazFuncion(nombre, argumentos, valor retorno, precondicion, postcondicion, complejidad, descripcion, aliasing)
\newcommandx{\InterfazFuncion}[9][4=true,6,7,8,9]{%
  \hangindent=\parindent
  \TipoFuncion{#1}{#2}{#3}\\%
  \textbf{Pre} $\equiv$ \{#4\}\\%
  \textbf{Post} $\equiv$ \{#5\}%
  \ifx#6\empty\else\\\textbf{Complejidad:} #6\fi%
  \ifx#7\empty\else\\\textbf{Descripción:} #7\fi%
  \ifx#8\empty\else\\\textbf{Aliasing:} #8\fi%
  \ifx#9\empty\else\\\textbf{Requiere:} #9\fi%
}

\newenvironment{Interfaz}{%
  \parskip=2ex%
  \noindent\textbf{\Large Interfaz}%
  \par%
}{}

\newenvironment{Representacion}{%
  \vspace*{2ex}%
  \noindent\textbf{\Large Representación}%
  \vspace*{2ex}%
}{}

\newenvironment{Algoritmos}{%
  \vspace*{2ex}%
  \noindent\textbf{\Large Algoritmos}%
  \vspace*{2ex}%
}{}


\newcommand{\Titulo}[1]{
  \vspace*{1ex}\par\noindent\textbf{\large #1}\par
}

\newenvironmentx{Estructura}[2][2={estr}]{%
  \par\vspace*{2ex}%
  \TipoVariable{#1} \textbf{se representa con} \TipoVariable{#2}%
  \par\vspace*{1ex}%
}{%
  \par\vspace*{2ex}%
}%

\newboolean{EstructuraHayItems}
\newlength{\lenTupla}
\newenvironmentx{Tupla}[1][1={estr}]{%
    \settowidth{\lenTupla}{\hspace*{3mm}donde \TipoVariable{#1} es \TipoVariable{tupla}$($}%
    \addtolength{\lenTupla}{\parindent}%
    \hspace*{3mm}donde \TipoVariable{#1} es \TipoVariable{tupla}$($%
    \begin{minipage}[t]{\linewidth-\lenTupla}%
    \setboolean{EstructuraHayItems}{false}%
}{%
    $)$%
    \end{minipage}
}

\newcommandx{\tupItem}[3][1={\ }]{%
    %\hspace*{3mm}%
    \ifthenelse{\boolean{EstructuraHayItems}}{%
        ,#1%
    }{}%
    \emph{#2}: \TipoVariable{#3}%
    \setboolean{EstructuraHayItems}{true}%
}

\newcommandx{\RepFc}[3][1={estr},2={e}]{%
  \tadOperacion{Rep}{#1}{bool}{}%
  \tadAxioma{Rep($#2$)}{#3}%
}%

\newcommandx{\Rep}[3][1={estr},2={e}]{%
  \tadOperacion{Rep}{#1}{bool}{}%
  \tadAxioma{Rep($#2$)}{true \ssi #3}%
}%

\newcommandx{\Abs}[5][1={estr},3={e}]{%
  \tadOperacion{Abs}{#1/#3}{#2}{Rep($#3$)}%
  \settominwidth{\hangindent}{Abs($#3$) \igobs #4: #2 $\mid$ }%
  \addtolength{\hangindent}{\parindent}%
  Abs($#3$) \igobs #4: #2 $\mid$ #5%
}%

\newcommandx{\AbsFc}[4][1={estr},3={e}]{%
  \tadOperacion{Abs}{#1/#3}{#2}{Rep($#3$)}%
  \tadAxioma{Abs($#3$)}{#4}%
}%


\newcommand{\DRef}{\ensuremath{\rightarrow}}

\begin{document}

\section{Módulo Ciudad Robotica}


\begin{Interfaz}


  \textbf{se explica con}: \tadNombre{Secuencia$(\alpha)$}, \tadNombre{Iterador Bidireccional($\alpha$)}.

  \textbf{géneros}: \TipoVariable{ciudad}, \TipoVariable{itLista($\alpha$)}.

  \textbf{usa}: 
  
  \Titulo{Operaciones básicas de ciudad}

  \InterfazFuncion{Crear}{\In{m}{mapa}}{ciudad}%
  {$res \igobs$ crear($m$)}%
  [$\Theta(1)$]
  [genera una nueva Ciudad.]
  [lo ideal seria no copiar ese mapa no?]
  
  \InterfazFuncion{Entrar}{\In{ts}{conj(tag)}, \In{e}{estacion}, \Inout{c}{ciudad}}{}
  [$c \igobs c_0 \land e \in$ estaciones($c$)]
  {$c \igobs$ entrar($ts, e, c_0$)}
  [$\Theta(copy(a))$]
  [...]
  [...]

  \InterfazFuncion{Mover}{\In{u}{rur}, \In{e}{estacion}, \Inout{c}{ciudad}}{}
  [$c \igobs c_0 \land e \in$ estaciones($c$)$\land \in $ robots($c$)]
  {$c \igobs$ mover($u, e, c_0$)}
  [$\Theta(copy(a))$]
  [...]
  [...]
  
  \InterfazFuncion{Inspeccion}{\In{e}{estacion}, \Inout{c}{ciudad}}{}
  [$c \igobs c_0 \land e \in$ estaciones($c$)]
  {$c \igobs$ inspeccion($e, c_0$)}
  [$\Theta(copy(a))$]
  [...]
  [...]
 
 \InterfazFuncion{ProximoRUR}{\In{c}{ciudad}}{rur}
  {$res \igobs$ proximoRUR($c$)}
  [$O(1)$]
  [...]
  [...]
  
  \InterfazFuncion{Mapa}{\In{c}{ciudad}}{mapa}
  {$res \igobs$ mapa($c$)}
  [$\Theta(copy(a))$]
  [...]
  [...]
  
  \InterfazFuncion{Robots}{\In{c}{ciudad}}{it(conj(rur))}
  {$res \igobs$ CrearIt(robots($c$))}
  [$O(1)$]
  [...]
  [...]
  
  \InterfazFuncion{Estacion}{\In{u}{rur}, \In{c}{ciudad}}{estacion}
  [$u \in$  robots($c$)]
  {$res \igobs$ estacion($u, c$)}
  [$O(1)$]
  [...]
  [...]
  
  \InterfazFuncion{Tags}{\In{u}{rur}, \In{c}{ciudad}}{conj(tag)}
  [$u \in$ robots($c$)]
  {$c \igobs$ inspeccion($e, c_0$)}
  [$O(1)$]
  [...]
  [...]

  \InterfazFuncion{$\#$Infracciones}{\In{u}{rur}, \In{c}{ciudad}}{nat}
  [$u \in$ robots($c$)]
  {$c \igobs$ inspeccion($e, c_0$)}
  [$\Theta(copy(a))$]
  [...]
  [...]

  \InterfazFuncion{Estaciones}{\In{c}{ciudad}}{it(conj(estaciones))}
  {$res \igobs$ CrearIt(estaciones($c$))} %CrearIt es la del modulo conjunto
  [$O(1)$]
  [...]
  [...]
  
\end{Interfaz}

\begin{Representacion}
  
  \Titulo{Representación de la ciudad}

  \begin{Estructura}{ciudad}[str]
    \begin{Tupla}[str]
      \tupItem{robRUR}{DiccArreglo(rur, datosRobot)}%
      \tupItem{\\robEstacion}{DiccTrie(estacion, datosEstacion)}%
      \tupItem{\\mapa}{DiccTrie(estacion, DiccTrie(estacion, Restriccion)}%
    \end{Tupla}

    \begin{Tupla}[datosRobot]
      \tupItem{presente?}{bool}%
      \tupItem{\\est}{estacion}%
      \tupItem{\\infr}{nat}%
      \tupItem{\\tags}{conjTrie(tags)}%
      \tupItem{\\sendas}{DiccTrie(estacion, DiccTrie(estacion, bool)}%
      \tupItem{\\itEst}{it(colaPrio(rur))}%
    \end{Tupla}
   
    \begin{Tupla}[datosEstacion]
      \tupItem{robots}{colaPrio(rur)}%
      \tupItem{ultimo}{puntero(nodo)}% va dentro de la cola este me parece
    \end{Tupla}
    
  \end{Estructura}

  \Rep[lst][l]{($l$.primero $=$ NULL) $=$ ($l$.longitud $=$ $0$) $\yluego$ ($l$.longitud $\neq$ $0$ \impluego \\
    Nodo($l$, $l$.longitud) $=$ $l$.primero $\land$ \\
    ($\forall i$: nat)(Nodo($l$,$i$)\DRef siguiente $=$ Nodo($l$,$i+1$)\DRef anterior) $\land$ \\
    ($\forall i$: nat)($1 \leq i <$ $l$.longitud $\implies$ Nodo($l$,$i$) $\neq$ $l$.primero)}\mbox{}

  ~      

  \tadOperacion{Nodo}{lst/l,nat}{puntero(nodo)}{$l$.primero $\neq$ NULL}
  \tadAxioma{Nodo($l$,$i$)}{\IF $i = 0$ THEN $l$.primero ELSE Nodo(FinLst($l$), $i-1$) FI}

  ~

  \tadOperacion{FinLst}{lst}{lst}{}
  \tadAxioma{FinLst($l$)}{Lst($l$.primero\DRef siguiente, $l$.longitud $-$ $\min$\{$l$.longitud, $1$\})}

  ~

  \tadOperacion{Lst}{puntero(nodo),nat}{lst}{}
  \tadAxioma{Lst($p,n$)}{$\langle p, n\rangle$}

  ~
 
  \AbsFc[lst]{secu($\alpha$)}[l]{\IF $l$.longitud $=$ $0$ THEN \secuencia{} ELSE \secuencia{$l$.primero\DRef dato}[Abs(FinLst($l$))] FI}

  \Titulo{Representación del iterador}

  \begin{Estructura}{itLista($\alpha$)}[iter]
    \begin{Tupla}[iter]
      \tupItem{siguiente}{puntero(nodo)}%
      \tupItem{lista}{puntero(lst)}%
    \end{Tupla}
  \end{Estructura}

  \Rep[iter][it]{Rep($\ast$($it$.lista)) $\yluego$ ($it$.siguiente $=$ NULL $\oluego$ ($\exists i$: nat)(Nodo($\ast it$.lista, $i$) $=$ $it$.siguiente)}

  ~

  \Abs[iter]{itBi($\alpha$)}[it]{b}{Siguientes($b$) $=$ Abs(Sig($it$.lista, $it$.siguiente)) $\land$\\
    Anteriores($b$) $=$ Abs(Ant($it$.lista, $it$.siguiente))}

  ~

  \tadOperacion{Sig}{puntero(lst)/l,puntero(nodo)/p}{lst}{Rep($\langle l, p\rangle$)}
  \tadAxioma{Sig($i, p$)}{Lst($p$, $l$\DRef longitud $-$ Pos($\ast l$, $p$))}

  ~

  \tadOperacion{Ant}{puntero(lst)/l,puntero(nodo)/p}{lst}{Rep($\langle l, p\rangle$)}
  \tadAxioma{Ant($i, p$)}{Lst(\IF $p$ $=$ $l$\DRef primero THEN NULL ELSE $l$\DRef primero FI, Pos($\ast l$, $p$))}

  ~

  {\small Nota: cuando $p$ $=$ NULL, Pos devuelve la longitud de la lista, lo cual está bien, porque significa que el iterador no tiene siguiente.}
  \tadOperacion{Pos}{lst/l,puntero(nodo)/p}{puntero(nodo)}{Rep($\langle l, p\rangle$)}
  \tadAxioma{Pos($l$,$p$)}{\IF $l$.primero $=$ $p$ $\lor$ $l$.longitud $=$ $0$ THEN $0$ ELSE $1$ $+$ Pos(FinLst($l$), $p$) FI}


\end{Representacion}

\begin{Algoritmos}
 
 
\end{Algoritmos}

\section{Modulo Restriccion}

\begin{Interfaz}

  \textbf{se explica con}: \tadNombre{Restriccion}

  \textbf{géneros}: \TipoVariable{restriccion}

  \textbf{usa}: 


  \InterfazFuncion{<\argumento>}{\In{t}{tag}}{restriccion}%
  {$res \igobs$ <t>}%
  [$\Theta(1)$]
  [genera una restriccion de un solo tag.]

  \InterfazFuncion{NOT \argumento}{\In{r}{restriccion}}{restriccion}% este capaz que es inout
  {$res \igobs$ NOT $r$}%
  [$\Theta(1)$]
  [...]
  [...]

  \InterfazFuncion{\argumento AND \argumento}{\In{r1}{restriccion}, \In{r2}{restriccion}}{restriccion}%
  {$res \igobs$ $r1$ AND $r2$}%
  [$\Theta(1)$]
  [...]
  [...]
  
  \InterfazFuncion{\argumento OR \argumento}{\In{r1}{restriccion}, \In{r2}{restriccion}}{restriccion}%
  {$res \igobs$ $r1$ OR $r2$}%
  [$\Theta(1)$]
  [...]
  [...]
  
  \InterfazFuncion{Verifica?}{\In{ts}{conj(tag)}, \In{r}{restriccion}}{bool}%
  {$res \igobs$ verifica?(ts, r)}%
  [$O(R)$]
  [...]
  [...]  
  
  
\end{Interfaz}

\begin{Representacion}
 \Titulo{Representacion de la restriccion}
 
 \begin{Estructura}{restriccion}[rtr]
  \begin{Tupla}[rtr]
   \tupItem{raiz}{puntero(Nodo)}
  \end{Tupla}

  \begin{Tupla}[Nodo]
   \tupItem{tag}{tag}
   \tupItem{tipo}{log}
   \tupItem{negado?}{bool}
   \tupItem{izq}{puntero(Nodo)}
   \tupItem{der}{puntero(Nodo)}
  \end{Tupla}
  
  \indent donde log es enum\{AND, OR, CAR\}
 \end{Estructura}

\end{Representacion}


\end{document}
